上次已经成功移植了系统和qt，最重要的是可以成功加载mcp2515驱动程序，以及运行mcp2515应用程序。
这就代表了我接下来可以通过can分析仪来与zj2440相互通讯，发送和接受can数据了，并且利用Ubuntu创建一个仪表盘gui，然后与mcp2515应用程序相互通讯，
从而对从汽车obd获取的数据进行响应，仪表实时显示车辆信息，比如车速，转速，油量等等。

然而并非事事如意，事事如意才不正常。
首先，当can分析仪与zj2440的mcp2515应用程序通讯时，并不能成功通信，相互发送can数据，毫无反应，好，那就开始了漫长刺激且充满乐趣的调试阶段，
开始分析驱动和应用，加入各种printf和printk，当然这使我更加了解驱动以及应用的编码逻辑，也确实从中学到了很多，
最终也是因为一个想法的尝试和巧合（其实后来证明想法是错的），才开始有了眉目。
我想到有可能之前这个驱动程序，是为一个晶振为16M的mcp2515模块写的，而并不是我手里拿到的晶振为8M的模块，那既然晶振差着二倍，那can传输的波特率，
两个设备自然也就必须得差二倍关系了。
我就把zj2440的波特率设为500KHz，而can分析仪则设为250KHz，然后使之相互通讯，奇迹发生了，canTest程序上终于有了回应，zj2440的应用程序上也有了回应。
我欣喜若狂，以为问题这就得到了解决，然而经过多次尝试，里面还有好多问题存在，有时能传输，有时不能传输，但起码已经给我了一个思路，不管晶振是不是8M，
终归，波特率的初始化和设置是有问题的。
我就开始针对波特率初始化的代码开始一步一步跟踪和分析，抱着“晶振从16M改为8M需要从新设置波特率”的信念，看mcp2515的datasheet，翻看位定时章节，
网上查资料，理解如何分配各项参数才能匹配上8M的晶振，最终找到了正确的参数配置，结果我找到驱动程序中的波特率参数配置项，一看，傻眼了......
人家就是按照8M晶振来设置参数的，这个设置一点都没错......
那究竟是哪里出了错了？当然继续用百试不爽的调试法宝：printk和prinf，在波特率初始化之后，我加入了调试函数，让串口打印出对应的寄存器里是否进行了正确的
配置，打印出来一看，啊？原来初始化后参数并没有按照程序里那样配置，嗯，起码知道了问题出在哪儿了。
那就开始继续深究，发现在驱动程序的probe函数里，确实执行过一次配置波特率，chip->bandrate = BandRate_125kbps;open函数里先把模块先把mcp2515置为配置模式，
再加载mcp2515_write_can_bandrate函数，随后再把mcp2515置为正常模式，所以当加载了驱动，应用程序打开时，波特率默认就是125kps了。
但这一切很正确，并没有解释初始化错误的问题，经过查阅datasheet，知道了只有在配置模式时，才能修改那些控制波特率的寄存器，而后的应用程序里的配置波特率函数，
看出了问题所在，应用程序里的这个can_set_bandrate函数，有一个ioctl函数，触发了驱动里的mcp2515_unlocked_ioctl函数，
而这个函数里有mcp2515_set_bandrate函数，也就是波特率配置函数，但是它的配置还生效吗？不能了，因为mcp2515已经从配置模式变到了正常模式，嗯，就是这儿了，
找到了问题的结症所在。
那解决这个问题也是比较好解决的了，只要把那个配置mcp2515为正常模式的函数，往后放，放到设置了波特率以后，发送或者接受函数之前，那就能成功配置波特率参数了。
修改完代码，剩下的就是验证了，通过打印函数查看，果然，mcp2515里的波特率寄存器有了正确的参数。
好，继续验证，can分析仪和zj2440的波特率分别调到相同的500KHz，然后相互通信，嗯，perfect！正常通信，没有错误。
所以说嘛，我的16M晶振和8M晶振的想法是错误的，但是给我解决问题的思路敲开了一个缝儿，让我发现了其中的蛛丝马迹，从而发现了真相。

那接下来就顺利了吗？当然不可能。

高兴了很长时间后，开始继续下一步，也是一个比较头疼的问题：如何把mcp2515应用程序里获得的数据，发送到qt的gui程序上，并且通过仪表指针的形式实时显示出来。

当然啦，有幸生在伟大的互联网时代，知识分享超便捷的时代，有问题当然要找度娘啦。
经过多次查找，有幸在csdn论坛中看到一个问题和回答，它的思路就是通过txt文件的形式，让mcp2515程序和qt程序相互读取和分享数据。
这个思路对我帮助很大，沿着这个思路，我开始修改代码。
在mcp2515应用程序端，加入fp=open（txt文件路径），把从can分析仪获取的有用数据发送到txt文件。
在qt程序端，使用Qfile函数和QFileSystemWatcher函数，再加入信号与槽，使txt文件只要有修改，就读入数据，反馈到gui上。
当然其中的实现过程，有各式各样的小麻烦， 不过还是那句话，有度娘嘛。

当我在qt的gui界面成功的拿到can分析仪实时发送的数据，剩下的就不是什么问题了，绘制仪表盘，然后连接，然后就OK了！

下一步，就该着手硬件了，我准备自制仪表盘芯片，（其实就是把jz2440开发板简化，并重新绘制电路板，并打样制作出来），然后换一块汽车仪表盘该有的大屏，
一个完整的产品就诞生了！
